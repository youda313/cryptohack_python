#!/usr/bin/env python2

# This is a templated Python exploit script based on the default
# exploit script found in Section 11.2.2 (Listing 345)

import socket
import telnetlib

# The IP address or domain name of the server
server = "ptap-shell.offsec.training"
# The port - update this value for future problems
port = 52777

# A helper function that allows you to interact with the socket
# after sending the appropriate shellcode payload
def interact(s):
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

# Replace this with real shellcode
shellcode = (
"\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"
"\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42"
"\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43"
"\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44"
"\x45\x45\x45\x45\x45\x45\x45\x45\x45\x45\x45\x45\x45\x45\x45"
)

# This will eventually be more than just the shellcode.
# You will update this value in future challenges.
# Adding '\n' since that is what the server is expecting as the end
buffer = shellcode + '\n'

# Set this to false when ready to execute on the challenge server
local = True
if local:
    print("Saving shellcode to 'exploit.txt'.")
    # Write buffer to 'exploit.txt' in the current directory
    with open("exploit.txt", 'wt') as f:
        # Using with has an implied close() and better error handling
        # https://www.pythonforbeginners.com/files/with-statement-in-python
        f.write(buffer)
# When local is not True
else:
    # Try the below commands. If anything fails, go to the except
    try:
        print("Sending shellcode to {0}:{1}.".format(server, port))
        # Set the socket attributes
        s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
        # Establish a connection to the remote server on this port
        s.connect((server, port))
        # Send the buffer
        s.send(buffer)
        # Now interact with the socket via command line
        interact(s)
        # Once complete the interaction, close the socket
        s.close()
        print("Done!")
    # Something failed (errored out) in the above commands
    except:
        print("Could not connect!")
